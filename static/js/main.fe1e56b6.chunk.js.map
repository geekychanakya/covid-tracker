{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","toggleChart","setState","showBarChart","state","className","window","screen","width","this","caseReport","cases","dayStat","recovered","deaths","updated","color","text","fontSize","onClick","disabled","data","chartData","height","options","legend","display","displayLegend","position","legendPosition","layout","padding","left","right","top","bottom","elements","point","radius","jsx","Component","defaultProps","App","fetchData","a","fetch","response","json","resBody","labels","registered_data","recovered_data","deaths_data","cases_time_series","map","casey","push","date","totalconfirmed","totalrecovered","totaldeceased","dateTime","statewise","lastupdatedtime","formatDate","split","substr","month","getMonth","confirmed","chartDataset","datasets","label","backgroundColor","borderColor","borderWidth","fill","key_values","confirmeddelta","recovereddelta","deceaseddelta","num","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,YAAc,WACZ,EAAKC,SAAS,CACZC,cAAe,EAAKC,MAAMD,gBAZ5B,EAAKC,MAAQ,CACXD,cAAc,GAHC,E,qDAmBjB,OACE,oCACE,yBAAKE,UAAU,QAAf,0BACA,yBAAKA,UAAWC,OAAOC,OAAOC,MAAQ,IAAM,SAAW,KACvD,yBAAKH,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SAAf,cACA,6BAAMI,KAAKT,MAAMU,WAAWC,MAAM,0BAAMN,UAAU,SAAhB,KAA2BI,KAAKT,MAAMY,QAAQD,MAA9C,OAEpC,yBAAKN,UAAU,aACb,yBAAKA,UAAU,SAAf,cACA,6BAAMI,KAAKT,MAAMU,WAAWG,UAAU,0BAAMR,UAAU,SAAhB,KAA2BI,KAAKT,MAAMY,QAAQC,UAA9C,OAExC,yBAAKR,UAAU,UACb,yBAAKA,UAAU,SAAf,WACA,6BAAMI,KAAKT,MAAMU,WAAWI,OAAO,0BAAMT,UAAU,SAAhB,KAA2BI,KAAKT,MAAMY,QAAQE,OAA9C,QAGvC,yBAAKT,UAAU,WACb,gDACA,0BAAMA,UAAU,QAAQI,KAAKT,MAAMU,WAAWK,QAA9C,QACA,0BAAMV,UAAU,QACd,kBAAC,IAAD,CAAOW,MAAM,UAAUC,KAAK,SAASC,SAAS,SAGlD,yBAAKb,UAAWC,OAAOC,OAAOC,MAAQ,IAAM,SAAW,KACvD,yBAAKH,UAAU,gBACb,4BAAQc,QAASV,KAAKR,YAAaI,UAAWI,KAAKL,MAAMD,aAAe,GAAK,SAAUiB,UAAWX,KAAKL,MAAMD,cAA7G,cACA,4BAAQgB,QAASV,KAAKR,YAAaI,UAAWI,KAAKL,MAAMD,aAAe,SAAW,GAAIiB,SAAUX,KAAKL,MAAMD,cAA5G,cAEF,yBAAKE,UAAU,SAEXI,KAAKL,MAAMD,aACT,kBAAC,IAAD,CACAkB,KAAMZ,KAAKT,MAAMsB,UACjBC,OAAQjB,OAAOC,OAAOC,MAAQ,IAAM,IAAM,IAC1CgB,QAAS,CACPC,OAAQ,CACNC,QAASjB,KAAKT,MAAM2B,cACpBC,SAAUnB,KAAKT,MAAM6B,gBAEvBC,OAAQ,CACNC,QAAS,CACPC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,OAKd,kBAAC,IAAD,CACAd,KAAMZ,KAAKT,MAAMsB,UACjBC,OAAQjB,OAAOC,OAAOC,MAAQ,IAAM,IAAM,IAC1CgB,QAAS,CACPC,OAAQ,CACNC,QAASjB,KAAKT,MAAM2B,cACpBC,SAAUnB,KAAKT,MAAM6B,gBAEvBO,SAAU,CACRC,MAAM,CACJC,OAAQhC,OAAOC,OAAOC,MAAQ,IAAM,EAAI,IAG5CsB,OAAQ,CACNC,QAAS,CACPC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,QAOpB,yBAAK9B,UAAU,UACb,2EAEF,2BAAOkC,KAAG,GAAV,wgF,GAnGYC,aAAdzC,EAQG0C,aAAe,CACpBd,eAAe,EACfE,eAAgB,UA2LL9B,QCxEA2C,E,kDA5Hb,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IAoBR2C,UArBmB,sBAqBP,gDAAAC,EAAA,sEACWC,MAAM,0CADjB,cACNC,EADM,gBAEYA,EAASC,OAFrB,OAEJC,EAFI,OAINC,EAAS,GACTC,EAAkB,GAClBC,EAAiB,GACjBC,EAAc,GAClBJ,EAAQK,kBAAkBC,KAAI,SAAAC,GAAK,sBAC9BN,EAAOO,KAAKD,EAAME,MADY,GAE9BP,EAAgBM,KAAKD,EAAMG,gBAFG,GAG9BP,EAAeK,KAAKD,EAAMI,gBAHI,GAI9BP,EAAYI,KAAKD,EAAMK,mBAGxBC,EAAWb,EAAQc,UAAU,GAAGC,gBAChCC,EAAaH,EAASI,MAAM,KAAK,GAC/BR,EAAOO,EAAWE,OAAO,EAAG,GAC5BC,EAAQ,EAAKC,SAASJ,EAAWE,OAAO,EAAG,IAEjDjB,EAAOO,KAAKC,EAAO,IAAMU,GACzBjB,EAAgBM,KAAKR,EAAQc,UAAU,GAAGO,WAC1ClB,EAAeK,KAAKR,EAAQc,UAAU,GAAGjD,WACzCuC,EAAYI,KAAKR,EAAQc,UAAU,GAAGhD,QAEhCwD,EAAe,CACnBrB,OAAQA,EACRsB,SAAU,CACR,CACEC,MAAO,aACPnD,KAAM6B,EACNuB,gBAAiB,mBACjBC,YAAa,kBACbC,YAAa,EACbC,MAAM,GAER,CACEJ,MAAO,YACPnD,KAAM8B,EACNsB,gBAAiB,mBACjBC,YAAa,kBACbC,YAAa,EACbC,MAAM,GAER,CACEJ,MAAO,SACPnD,KAAM+B,EACNqB,gBAAiB,mBACjBC,YAAa,mBACbC,YAAa,EACbC,MAAM,KAKZ,EAAK1E,SAAS,CACZoB,UAAWgD,EACX5D,WAAY,CACVC,MAAOqC,EAAQc,UAAYd,EAAQc,UAAU,GAAGO,UAAY,EAC5DxD,UAAWmC,EAAQc,UAAYd,EAAQc,UAAU,GAAGjD,UAAY,EAChEC,OAAQkC,EAAQc,UAAYd,EAAQc,UAAU,GAAGhD,OAAS,EAC1DC,QAASiC,EAAQc,UAAYd,EAAQc,UAAU,GAAGC,gBAAkB,GAEtEnD,QAAS,CACPD,MAAOqC,EAAQ6B,WAAa7B,EAAQ6B,WAAW,GAAGC,eAAiB,EACnEjE,UAAWmC,EAAQ6B,WAAa7B,EAAQ6B,WAAW,GAAGE,eAAiB,EACvEjE,OAAQkC,EAAQ6B,WAAa7B,EAAQ6B,WAAW,GAAGG,cAAgB,KAlE7D,4CArBO,EA4FnBZ,SAAW,SAACa,GACV,OAAQA,GACN,IAAK,KACH,MAAO,QACT,IAAK,KACH,MAAO,QACT,IAAK,KACH,MAAO,MACT,IAAK,KACH,MAAO,OACT,IAAK,KACH,MAAO,OACT,IAAK,KACH,MAAO,SACT,IAAK,KACH,MAAO,YACT,QACE,MAAO,KA3GX,EAAK7E,MAAQ,CACXkB,UAAW,GACXZ,WAAY,CACVC,MAAO,EACPE,UAAW,EACXC,OAAQ,GAEVF,QAAS,CACPD,MAAO,EACPE,UAAW,EACXC,OAAQ,IAZK,E,iEAkBjBL,KAAKkC,c,+BAgGL,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAOiB,UAAWb,KAAKL,MAAMkB,UAAWZ,WAAYD,KAAKL,MAAMM,WAAYE,QAASH,KAAKL,MAAMQ,gB,GAtHvF4B,aCQE0C,QACW,cAA7B5E,OAAO6E,SAASC,UAEe,UAA7B9E,OAAO6E,SAASC,UAEhB9E,OAAO6E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fe1e56b6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Line, Bar } from 'react-chartjs-2'\nimport Blink from 'react-blink-text';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showBarChart: false\n    }\n  }\n\n  static defaultProps = {\n    displayLegend: true,\n    legendPosition: 'bottom'\n  }\n\n  toggleChart = () => {\n    this.setState({\n      showBarChart: !this.state.showBarChart\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <div className='text'>INDIA COVID-19 TRACKER</div>\n        <div className={window.screen.width < 740 ? 'mobile' : ''}></div>\n        <div className='cases-count'>\n          <div className='confirmed'>\n            <div className='label'>CONFIRMED:</div>\n            <div>{this.props.caseReport.cases}<span className='daily'>[+{this.props.dayStat.cases}]</span></div>\n          </div>\n          <div className='recovered'>\n            <div className='label'>RECOVERED:</div>\n            <div>{this.props.caseReport.recovered}<span className='daily'>[+{this.props.dayStat.recovered}]</span></div>\n          </div>\n          <div className='deaths'>\n            <div className='label'>DEATHS:</div>\n            <div>{this.props.caseReport.deaths}<span className='daily'>[+{this.props.dayStat.deaths}]</span></div>\n          </div>\n        </div>\n        <div className='updated'>\n          <span>LAST UPDATED: </span>\n          <span className='date'>{this.props.caseReport.updated} IST</span>\n          <span className='live'>\n            <Blink color='#C62828' text='&bull;' fontSize='30' />\n          </span>\n        </div>\n        <div className={window.screen.width < 740 ? 'mobile' : ''}></div>\n        <div className='toggle-chart'>\n          <button onClick={this.toggleChart} className={this.state.showBarChart ? '' : 'active'} disabled={!this.state.showBarChart}>LINE CHART</button>\n          <button onClick={this.toggleChart} className={this.state.showBarChart ? 'active' : ''} disabled={this.state.showBarChart}>BAR CHART</button>\n        </div>\n        <div className='chart'>\n          {\n            this.state.showBarChart\n            ? <Bar\n              data={this.props.chartData}\n              height={window.screen.width < 740 ? 200 : 110}\n              options={{\n                legend: {\n                  display: this.props.displayLegend,\n                  position: this.props.legendPosition\n                },\n                layout: {\n                  padding: {\n                    left: 10,\n                    right: 20,\n                    top: 0,\n                    bottom: 0\n                  }\n                }\n              }}\n            />\n            : <Line\n              data={this.props.chartData}\n              height={window.screen.width < 740 ? 200 : 110}\n              options={{\n                legend: {\n                  display: this.props.displayLegend,\n                  position: this.props.legendPosition\n                },\n                elements: {\n                  point:{\n                    radius: window.screen.width < 740 ? 0 : 3\n                  }\n                },\n                layout: {\n                  padding: {\n                    left: 10,\n                    right: 20,\n                    top: 0,\n                    bottom: 0\n                  }\n                }\n              }}\n            />\n          }\n        </div>\n        <div className='credit'>\n          <h6>Data Source: https://www.covid19india.org/</h6>\n        </div>\n        <style jsx>{`\n          .toggle-chart button {\n            padding: 5px 10px;\n            margin-bottom: 20px;\n            cursor: pointer;\n            font-size: 9px;\n            border: 1px solid #00579b;\n          }\n          .toggle-chart button:focus {\n            background-image: none;\n            outline: 0;\n            box-shadow: none;\n          }\n          .toggle-chart .active {\n            background-color: rgb(1, 87, 155);\n            color: #fff;\n          }\n          .daily {\n            font-size: 9px;\n            font-weight: 600;\n            margin-left: 5px;\n          }\n          .cases-count {\n            padding: 5px 0 5px 5px;\n            margin-top: 20px;\n          }\n          .cases-count div {\n            font-weight: 900;\n            border-radius: 5px;\n            margin-right: 5px;\n            font-size: 16px;\n          }\n          .cases-count .label {\n            display: block;\n            font-weight: 300;\n            font-size: 12px;\n          }\n          .confirmed {\n            padding: 16px 12px;\n            background: rgb(232, 234, 246);\n            color: rgb(40, 53, 147);\n            display: inline-block;\n            text-align: left;\n          }\n          .recovered {\n            padding: 16px 12px;\n            background: rgb(232, 245, 233);\n            color: rgb(46, 125, 50);\n            display: inline-block;\n            text-align: left;\n          }\n          .deaths {\n            padding: 16px 16px;\n            background: rgb(255, 235, 238);\n            color: rgb(198, 40, 40);\n            display: inline-block;\n            text-align: left;\n          }\n          .updated {\n            margin-bottom: 15px;\n          }\n          .updated span {\n            color: #2E7D32;\n            font-weight: 300;\n            font-size: 12px;\n          }\n          .updated .date {\n            font-weight: 600;\n          }\n          .text {\n            background: rgb(232, 245, 233);\n            padding: 18px;\n            color: rgb(46, 125, 50);\n            font-weight: 600;\n            font-size: 20px;\n          }\n          .live {\n            display: inline-block;\n            margin-top: -40px;\n          }\n          .live .blink {\n            font-size: 30px;\n            margin-left: 2px;\n          }\n          .credit h6 {\n            color: rgb(40, 53, 147);\n            font-weight: 600;\n            font-size: 10px;\n          }\n          .mobile {\n            margin-top: 20px;\n          }\n        `}</style>\n      </>\n    )\n  }\n}\n\nexport default Chart","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chartData: {},\n      caseReport: {\n        cases: 0,\n        recovered: 0,\n        deaths: 0\n      },\n      dayStat: {\n        cases: 0,\n        recovered: 0,\n        deaths: 0\n      }\n    }\n  }\n\n  componentWillMount() {\n    this.fetchData()\n  }\n\n  fetchData = async () => {\n    let response = await fetch('https://api.covid19india.org/data.json') // 'https://corona.lmao.ninja/v2/historical' 'https://corona.lmao.ninja/countries/India'\n    const resBody = await response.json()\n\n    let labels = []\n    let registered_data = []\n    let recovered_data = []\n    let deaths_data = []\n    resBody.cases_time_series.map(casey => ({\n      ...labels.push(casey.date),\n      ...registered_data.push(casey.totalconfirmed),\n      ...recovered_data.push(casey.totalrecovered),\n      ...deaths_data.push(casey.totaldeceased)\n    }))\n\n    let dateTime = resBody.statewise[0].lastupdatedtime\n    let formatDate = dateTime.split(' ')[0]\n    const date = formatDate.substr(0, 2);\n    const month = this.getMonth(formatDate.substr(3, 2))\n\n    labels.push(date + ' ' + month)\n    registered_data.push(resBody.statewise[0].confirmed)\n    recovered_data.push(resBody.statewise[0].recovered)\n    deaths_data.push(resBody.statewise[0].deaths)\n    \n    const chartDataset = {\n      labels: labels,\n      datasets: [\n        {\n          label: 'Registered',\n          data: registered_data,\n          backgroundColor: 'rgb(40, 53, 147)',\n          borderColor: 'rgb(1, 87, 155)',\n          borderWidth: 2,\n          fill: false\n        },\n        {\n          label: 'Recovered',\n          data: recovered_data,\n          backgroundColor: 'rgb(46, 125, 50)',\n          borderColor: 'rgb(0, 105, 92)',\n          borderWidth: 2,\n          fill: false\n        },\n        {\n          label: 'Deaths',\n          data: deaths_data,\n          backgroundColor: 'rgb(198, 40, 40)',\n          borderColor: 'rgb(183, 28, 28)',\n          borderWidth: 2,\n          fill: false\n        }\n      ]\n    }\n\n    this.setState({\n      chartData: chartDataset,\n      caseReport: {\n        cases: resBody.statewise ? resBody.statewise[0].confirmed : 0,\n        recovered: resBody.statewise ? resBody.statewise[0].recovered : 0,\n        deaths: resBody.statewise ? resBody.statewise[0].deaths : 0,\n        updated: resBody.statewise ? resBody.statewise[0].lastupdatedtime : 0\n      },\n      dayStat: {\n        cases: resBody.key_values ? resBody.key_values[0].confirmeddelta : 0,\n        recovered: resBody.key_values ? resBody.key_values[0].recovereddelta : 0,\n        deaths: resBody.key_values ? resBody.key_values[0].deceaseddelta : 0\n      }\n    })\n  }\n\n  getMonth = (num) => {\n    switch (num) {\n      case '03':\n        return 'March'\n      case '04':\n        return 'April'\n      case '05':\n        return 'May'\n      case '06':\n        return 'June'\n      case '07':\n        return 'July'\n      case '08':\n        return 'August'\n      case '09':\n        return 'September'\n      default:\n        return ''\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"chart-section\">\n          <Chart chartData={this.state.chartData} caseReport={this.state.caseReport} dayStat={this.state.dayStat} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}